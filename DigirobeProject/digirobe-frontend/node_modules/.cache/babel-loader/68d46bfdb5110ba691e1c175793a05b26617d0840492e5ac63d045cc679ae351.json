{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ragha\\\\myntra-clone-microservices\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode'; // <-- Import the library\nimport HomePage from './components/HomePage';\nimport AuthForm from './components/AuthForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [userRole, setUserRole] = useState(null); // <-- Add state for the role\n\n  // This useEffect will run whenever the token changes\n  useEffect(() => {\n    if (token) {\n      try {\n        const decodedToken = jwtDecode(token);\n        // The 'roles' claim should be an array, e.g., [\"ROLE_ADMIN\"]\n        const role = decodedToken.roles && decodedToken.roles.length > 0 ? decodedToken.roles[0] : null;\n        setUserRole(role);\n      } catch (error) {\n        console.error(\"Invalid token:\", error);\n        handleLogout(); // Log out if token is invalid\n      }\n    } else {\n      setUserRole(null);\n    }\n  }, [token]);\n  const handleLogin = newToken => {\n    localStorage.setItem('token', newToken);\n    setToken(newToken);\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: token ?\n    /*#__PURE__*/\n    // Pass the userRole down to HomePage\n    _jsxDEV(HomePage, {\n      token: token,\n      userRole: userRole,\n      handleLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(AuthForm, {\n      onLoginSuccess: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qGqfh2ttkmznJHJNHAIg402rp3A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jwtDecode","HomePage","AuthForm","jsxDEV","_jsxDEV","App","_s","token","setToken","localStorage","getItem","userRole","setUserRole","decodedToken","role","roles","length","error","console","handleLogout","handleLogin","newToken","setItem","removeItem","children","fileName","_jsxFileName","lineNumber","columnNumber","onLoginSuccess","_c","$RefreshReg$"],"sources":["C:/Users/ragha/myntra-clone-microservices/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode'; // <-- Import the library\nimport HomePage from './components/HomePage';\nimport AuthForm from './components/AuthForm';\n\nfunction App() {\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [userRole, setUserRole] = useState(null); // <-- Add state for the role\n\n  // This useEffect will run whenever the token changes\n  useEffect(() => {\n    if (token) {\n      try {\n        const decodedToken = jwtDecode(token);\n        // The 'roles' claim should be an array, e.g., [\"ROLE_ADMIN\"]\n        const role = decodedToken.roles && decodedToken.roles.length > 0 ? decodedToken.roles[0] : null;\n        setUserRole(role);\n      } catch (error) {\n        console.error(\"Invalid token:\", error);\n        handleLogout(); // Log out if token is invalid\n      }\n    } else {\n      setUserRole(null);\n    }\n  }, [token]);\n\n  const handleLogin = (newToken) => {\n    localStorage.setItem('token', newToken);\n    setToken(newToken);\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n  };\n\n  return (\n    <div>\n      {token ? (\n        // Pass the userRole down to HomePage\n        <HomePage token={token} userRole={userRole} handleLogout={handleLogout} />\n      ) : (\n        <AuthForm onLoginSuccess={handleLogin} />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAC;AACxC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,QAAQ,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACW,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACjE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEhD;EACAC,SAAS,CAAC,MAAM;IACd,IAAIQ,KAAK,EAAE;MACT,IAAI;QACF,MAAMM,YAAY,GAAGb,SAAS,CAACO,KAAK,CAAC;QACrC;QACA,MAAMO,IAAI,GAAGD,YAAY,CAACE,KAAK,IAAIF,YAAY,CAACE,KAAK,CAACC,MAAM,GAAG,CAAC,GAAGH,YAAY,CAACE,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;QAC/FH,WAAW,CAACE,IAAI,CAAC;MACnB,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;QACtCE,YAAY,CAAC,CAAC,CAAC,CAAC;MAClB;IACF,CAAC,MAAM;MACLP,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC;EAEX,MAAMa,WAAW,GAAIC,QAAQ,IAAK;IAChCZ,YAAY,CAACa,OAAO,CAAC,OAAO,EAAED,QAAQ,CAAC;IACvCb,QAAQ,CAACa,QAAQ,CAAC;EACpB,CAAC;EAED,MAAMF,YAAY,GAAGA,CAAA,KAAM;IACzBV,YAAY,CAACc,UAAU,CAAC,OAAO,CAAC;IAChCf,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;EAED,oBACEJ,OAAA;IAAAoB,QAAA,EACGjB,KAAK;IAAA;IACJ;IACAH,OAAA,CAACH,QAAQ;MAACM,KAAK,EAAEA,KAAM;MAACI,QAAQ,EAAEA,QAAS;MAACQ,YAAY,EAAEA;IAAa;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAE1ExB,OAAA,CAACF,QAAQ;MAAC2B,cAAc,EAAET;IAAY;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EACzC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACtB,EAAA,CAzCQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AA2CZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}